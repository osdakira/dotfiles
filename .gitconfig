# http://www.kernel.org/pub/software/scm/git/docs/git-config.html
# http://progit.org/book/ja/ch3-5.html
# リモートブランチからローカルブランチにチェックアウトすると、_追跡ブランチ (tracking branch)_ というブランチが自動的に作成されます。追跡ブランチとは、リモートブランチと直接のつながりを持つローカルブランチのことです。追跡ブランチ上で git push を実行すると、Git は自動的にプッシュ先のサーバーとブランチを判断します。また、追跡ブランチ上で git pull を実行すると、リモートの参照先からすべてのデータを取得し、対応するリモートブランチの内容を自動的にマージします。
# あるリポジトリをクローンしたら、自動的に master ブランチを作成し、origin/master を追跡するようになります。これが、git push や git pull が引数なしでもうまく動作する理由です。しかし、必要に応じてそれ以外の追跡ブランチを作成し、origin 以外にあるブランチや master 以外のブランチを追跡させることも可能です。シンプルな方法としては、git checkout -b [branch] [remotename]/[branch] を実行します。Git バージョン 1.6.2 以降では、より簡単に --track を使うことができます。

[core]
    editor = vi
    quotepath = false
	excludesfile = /Users/akira/.gitignore

[gui]
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
[gui]
	recentrepo = /Users/akira/projects/ryoma
[user]
	name = Akira Osada
	email = osada@gu3.co.jp

[push]
    # nothing - do not push anything.
    # matching - push all matching branches. All branches having the same name in both ends are considered to be matching. This is the default.
    # tracking - push the current branch to its upstream branch.
    # current - push the current branch to a branch of the same name.

    # default = tracking       # defaultのpush先はtrackingしているリポジトリ
	default = current # tracking について知らないので、とりあえず同名で。




# http://yoshimov.com/?page=Git%2F%A5%EA%A5%E2%A1%BC%A5%C8%A5%D6%A5%E9%A5%F3%A5%C1%A4%CE%CA%D1%B9%B9
# デフォルトのリモートブランチの設定
# リモートのブランチ指定を省略したい場合は、
# git config --add branch.localbranch.remote origin
# git config --add branch.localbranch.merge remotebranch
# と設定しておくと、
# git pull
# のみで対応するリモートbranchの変更点をmergeしてくれるので、間違って意図しないbranchをmergeしてしまうことが少なくなります。

[branch "localbranch"]
	merge = remotebranch
	remote = origin

[branch "master"]
	remote = origin
	merge = master

[branch "release"]
	remote = origin
	merge = release


# copied by http://d.hatena.ne.jp/yuroyoro/20101008/1286531851
[alias]
  st = status
  sh = show
  so = remote show origin
#   ft = fetch
#   up = pull --rebase       # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
#   ad = add
#   ci = commit -a           # modifiedなファイルを全てstageへ
  cam = commit -a --amend  # 直前のcommitを修正
#   co = checkout
  # branch関連
  br = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n

[i18n]
    commitencoding = UTF-8
    logoutputencoding = UTF-8
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[github]
	user = Sadaz
