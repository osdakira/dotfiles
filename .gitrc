alias ginit="cd ..; git submodule init; cd application"
alias gupdate="cd ..; git submodule update ; cd application"
alias gsubmodule="cd ..; git submodule; cd application"

alias gadd="git add"
alias gcom="git commit -m"
alias gcam="git add .; git commit -am"
alias gpul="git pull"
alias gpl="git pull"
alias gpuh="git push"
alias gpsh="git push"
alias gpush="git push"
alias gtus="git status"
alias glog="git log"
alias gls="git log --stat"
alias gp="git log -p"
alias gout="git checkout"
alias gbr="git branch"
alias gdiff="git diff"
alias gdif="git diff"
alias gmerge="git merge"
alias gmerg="git merge"
alias gstash="git stash"
alias gst="git stash"
alias gmgm="git merge master"
alias gmgr="git merge release"
alias grbm="git rebase master"
alias g1="git log --stat -1 -p"

alias gr="gout release"
alias gm="gout master"
alias go="gout osada"


alias A="git add"
alias S="git status"
alias D="git diff"
alias DC="git diff --cached"
alias C="git commit -m"
alias gamend="git commit --amend"

alias glogtree="git log --graph --pretty=oneline --decorate --date=short --abbrev-commit --branches"


### Display git branch ###

c_cyan=`tput setaf 6`
c_red=`tput setaf 1`
c_green=`tput setaf 2`
c_sgr0=`tput sgr0`

parse_git_status(){
    local GIT_STATUS=`git status 2>/dev/null`
    local GIT_STASH=`git stash list  2>/dev/null`
    if [[ $GIT_STATUS != "" ]] ; then
        local REFS=$(git symbolic-ref HEAD 2>/dev/null)
        #local STAT_COLOR="\[\e[1;32m\]"
        local STAT_COLOR=$c_green
        local REFS="${REFS#refs/heads/}"
        if [[ `echo $GIT_STATUS | grep "modified:"` != "" ]] ; then
            STAT_COLOR="\[\e[1;31m\]"
            REFS="${REFS}\[\e[0m\] \[\e[1;35m\]modified\[\e[0m\]"
        fi
        if [[ `echo $GIT_STATUS | grep "ahead of"` != "" ]] ; then
            STAT_COLOR="\[\e[1;31m\]"
            REFS="${REFS}\[\e[0m\] \[\e[1;36m\]not pushed\[\e[0m\]"
        fi 
        if [[ `echo $GIT_STATUS | grep "modified:"` != "" ]] ; then
            STAT_COLOR="\[\e[1;31m\]"
            REFS="${REFS}\[\e[0m\] \[\e[1;35m\]modified\[\e[0m\]"
        fi
        if [[ `echo $GIT_STASH` != "" ]] ; then
            STAT_COLOR="\[\e[1;31m\]"
            REFS="${REFS}\[\e[0m\] \[\e[1;35m\]modified\[\e[0m\]"
        fi
        echo -e "${STAT_COLOR}${REFS}"
        
    fi
}

parse_git_branch ()
{
  if git rev-parse --git-dir >/dev/null 2>&1
  then
          gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
  else
          return 0
  fi
  echo -e $gitver
}

branch_color ()
{
        if git rev-parse --git-dir >/dev/null 2>&1
        then
                color=""
                if git diff --quiet 2>/dev/null >&2 
                then
                        color="${c_green}"
                else
                        color=${c_red}
                fi
        else
                return 0
        fi
        echo -ne $color
}

parse_git_stash(){
        if [[ `git stash list 2>/dev/null`  != "" ]] ; then
           color=" "${c_cyan}stash${c_sgr0}
        else
                return 0
        fi
        echo -ne $color
}

PS1='[\[$(branch_color)\]$(parse_git_branch)\[${c_sgr0}\]$(parse_git_stash)]\[${c_red}\]\w\[${c_sgr0}\]: '

#PS1='[\[$(branch_color)\]$(parse_git_branch)\[${c_sgr0}\]] \u@\[${c_red}\]\w\[${sgr0_c}\]: '
#PS1='[\[$(branch_color)\]$(parse_git_status)\[${c_sgr0}\]] \[${c_red}\]\w\[${c_sgr0}\]: '

function prompt_command {
    local RETURN_CODE="$?"
    local ASCII_RESET="\[\e[0m\]"
    local ASCII_BOLD="\[\e[1m\]"
    local USER_COLOR="\[\e[1;33m\]" # yellow
    local PROMPT_COLOR="\[\e[1;32m\]"
    if [[ ${EUID} == 0 ]] ; then
        PROMPT_COLOR="\[\e[1;31m\]"
    fi
    local HOST_COLOR="\[\e[1;32m\]" # green
    local DATE_COLOR="\[\e[1;31m\]" # red
    local TIME_COLOR="\[\e[1;34m\]" # purple
    local DATE_STRING="\$(date +%m/%d)"
    local TIME_STRING="\$(date +%H:%M:%S)"
    local CYAN_COLOR="\[\e[1;36m\]"
    local PINK_COLOR="\[\e[1;35m\]"
    
    local PROMPT_PREFIX="$PROMPT_COLOR"
    if [[ $RETURN_CODE != 0 ]] ; then
        PROMPT_PREFIX="$DATE_COLOR$RETURN_CODE$ASCII_RESET " # do nothing
    fi
    local GIT_STATUS=`git status 2>/dev/null`
    if [[ $GIT_STATUS != "" ]] ; then
        local REFS=$(git symbolic-ref HEAD 2>/dev/null)
        REFS="${REFS#refs/heads/}"
        if [[ `echo $GIT_STATUS | grep "modified:"` != "" ]] ; then
            REFS="$REFS$ASCII_RESET ${PINK_COLOR}modified"
        fi
        if [[ `echo $GIT_STATUS | grep "ahead of"` != "" ]] ; then
            REFS="$REFS$ASCII_RESET ${CYAN_COLOR}not pushed"
        fi 
        PROMPT_PREFIX="$PROMPT_PREFIX$USER_COLOR$REFS$ASCII_RESET"
    fi
    
    #PS1="$ASCII_BOLD[$USER_COLOR\u $HOST_COLOR\h $DATE_COLOR$DATE_STRING $TIME_COLOR$TIME_STRING $PROMPT_PREFIX$ASCII_RESET\w$ASCII_BOLD]$ASCII_RESET\n$PROMPT_COLOR\\\$$ASCII_RESET "
    #PS1="$ASCII_BOLD[$PROMPT_PREFIX$ASCII_RESET]\w:"
    #PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
    echo -e "$ASCII_BOLD[$PROMPT_PREFIX$ASCII_RESET]"
}
#export PROMPT_COMMAND=prompt_command
